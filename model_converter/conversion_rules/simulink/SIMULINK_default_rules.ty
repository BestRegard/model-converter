### All basic Simscape Electrical elements

# AC Current Source --- Missing Terminals
# AC Voltage Source --- Missing Terminals
# Controlled Current Source --- Missing Terminals
# Controlled Voltage Source --- Missing Terminals
# DC Voltage Source --- Missing Terminals
# Three-Phase Source --- Missing Terminals
# Three-Phase Programmable Voltage Source --- SKIP?
# Breaker --- TODO (Masked)
# Connection Port --- Missing Terminals
# Distributed Parameters Line --- TODO (Masked)
# Ground --- Missing Terminals
# Grounding Transformer --- SKIP?
# Linear Transformer --- Missing Terminals (Masked)
# Multi-Winding Transformer --- Missing Terminals (Masked)
# Mutual Inductance --- TODO (We support up to 4 coupled inductors)
# Neutral --- SKIP?
# Parallel RLC Branch --- TODO
# Parallel RLC Load --- TODO
# Pi Section Line --- TODO (Masked)
# Saturable Transformer --- SKIP?
# Series RLC Branch --- TODO
# Series RLC Load --- TODO
# Surge Arrester --- SKIP?
# Three-Phase Breaker --- TODO (Masked)
# Three-Phase Fault --- TODO (Masked)
# Three-Phase Transformer 12 Terminals --- SKIP?
# Three-Phase Transformer Inductance Matrix Type (Three Windings) --- SKIP?
# Three-Phase Transformer Inductance Matrix Type (Two Windings) --- SKIP?
# Three-Phase Dynamic Load --- SKIP?
# Three-Phase Harmonic Filter --- SKIP?
# Three-Phase Mutual Inductance Z1-Z0 --- SKIP?
# Three-Phase Parallel RLC Branch --- TODO
# Three-Phase Parallel RLC Load --- TODO
# Three-Phase PI Section Line --- TODO
# Three-Phase Series RLC Branch  --- TODO
# Three-Phase Series RLC Load --- TODO
# Three-Phase Transformer (Three Windings) --- Missing Terminals (Masked)
# Three-Phase Transformer (Two Windings) --- Missing Terminals (Masked)
# Zigzag Phase-Shifting Transformer --- SKIP?
# Asynchronous Machine pu Units --- TODO (Masked)
# Asynchronous Machine SI Units --- TODO (Masked)
# DC Machine --- TODO (Masked)
# Permanent Magnet Synchronous Machine --- TODO (Masked)
# Simplified Synchronous Machine pu Units --- TODO (Masked)
# Simplified Synchronous Machine SI Units --- TODO (Masked)
# Single Phase Asynchronous Machine --- TODO (Masked)
# Stepper Motor --- SKIP?
# Switched Reluctance Motor --- SKIP?
# Synchronous Machine pu Fundamental --- TODO (Masked)
# Synchronous Machine pu Standard --- TODO (Masked)
# Synchronous Machine SI Fundamental --- TODO (Masked)


powerlib/Electrical Sources/AC Current Source => core/Current Source:
    init_source_nature="Sine";
    init_rms_value=amplitude_to_rms(amplitude=Amplitude);
    init_frequency=Frequency;
    init_phase=Phase;

	Terminals:
		p_node[pe] = rconn:1;
		n_node[pe] = lconn:1;
	;
;

powerlib/Electrical Sources/AC Voltage Source => core/Voltage Source:
    init_source_nature="Sine";
    init_rms_value=amplitude_to_rms(amplitude=Amplitude);
    init_frequency=Frequency;
    init_phase=Phase;

	Terminals:
		p_node[pe] = rconn:1;
		n_node[pe] = lconn:1;
	;
;

powerlib/Electrical Sources/Controlled Current Source => core/Current Source:

	Terminals:
		p_node[pe] = rconn:1;
		n_node[pe] = lconn:1;
	;
;

powerlib/Electrical Sources/Controlled Voltage Source => core/Voltage Source:

	Terminals:
		p_node[pe] = rconn:1;
		n_node[pe] = lconn:1;
	;
;

powerlib/Electrical Sources/DC Voltage Source => core/Voltage Source:
    init_source_nature="Constant";
    init_const_value=Amplitude;

	Terminals:
		p_node[pe] = rconn:1;
		n_node[pe] = lconn:1;
	;
;


powerlib/Electrical Sources/Three-Phase Source => core/Three Phase Voltage Source:
    init_rms_value = Voltage;
    init_frequency = Frequency;
    init_phase = Phase;

	Terminals:
		a_node[pe] = rconn:1;
        b_node[pe] = rconn:2;
        c_node[pe] = rconn:3;
		n_node[pe] = lconn:1; # Yg, Yn, Y dependent
	;
;

powerlib/Elements/Ground => core/Ground:

	Terminals:
		node[pe] = lconn:1;
	;
;


########## Typhoon Library

typhoonHILlib/Transformer/Single-Phase Ideal => core/Ideal Transformer:
    n1 = n1;
    n2 = n2;

	Terminals:
		prm_1[pe] = lconn:1;
		prm_2[pe] = lconn:2;
        sec_1[pe] = rconn:1;
		sec_2[pe] = rconn:2;
	;
;

typhoonHILlib/Transformer/Single-Phase Two Windings => core/Single Phase Two Winding Transformer:
    input = units;
    core_sat = on_off_to_bool(sat_toggle);
    Sn = Sn;
    f = fn;
    V1 = V1;
    V2 = V2;
    I1 = I1;
    I2 = I2;
    R1 = R1;
    R2 = R2;
    L1 = L1;
    L2 = L2;
    Rm = Rm;
    Lm = Lm;
    embedded_cp1 = on_off_to_bool(coup12);

	Terminals:
		prm_1[pe] = lconn:1;
		prm_2[pe] = lconn:2;
        sec_1[pe] = rconn:1;
		sec_2[pe] = rconn:2;
	;
;

typhoonHILlib/Transformer/Single-Phase Three Windings => core/Single Phase Three Winding Transformer:
    input = units;
    core_sat = on_off_to_bool(sat_toggle);
    Sn = Sn;
    f = fn;
    V1 = V1;
    V2 = V2;
    V3 = V3;
    I1 = I1;
    I2 = I2;
    I3 = I3;
    R1 = R1;
    R2 = R2;
    R3 = R3;
    L1 = L1;
    L2 = L2;
    L3 = L3;
    Rm = Rm;
    Lm = Lm;
    embedded_cp1_12 = on_off_to_bool(coup12);
    embedded_cp1_13 = on_off_to_bool(coup13);

	Terminals:
		prm_1[pe] = lconn:1;
		prm_2[pe] = lconn:2;
        sec_1[pe] = rconn:1;
		sec_2[pe] = rconn:2;
        sec_3[pe] = rconn:3;
		sec_4[pe] = rconn:4;
	;
;

typhoonHILlib/Transformer/Single-Phase Four Windings => core/Single Phase Four Winding Transformer:
    input = units;
    core_sat = on_off_to_bool(sat_toggle);
    Sn = Sn;
    f = fn;
    V1 = V1;
    V2 = V2;
    V3 = V3;
    V4 = V4;
    I1 = I1;
    I2 = I2;
    I3 = I3;
    I4 = I4;
    R1 = R1;
    R2 = R2;
    R3 = R3;
    R3 = R3;
    L1 = L1;
    L2 = L2;
    L3 = L3;
    L4 = L4;
    Rm = Rm;
    Lm = Lm;
    embedded_cp1_12 = on_off_to_bool(coup12);
    embedded_cp1_13 = on_off_to_bool(coup13);
    embedded_cp1_14 = on_off_to_bool(coup14);

	Terminals:
		prm_1[pe] = lconn:1;
		prm_2[pe] = lconn:2;
        sec_1[pe] = rconn:1;
		sec_2[pe] = rconn:2;
        sec_3[pe] = rconn:3;
		sec_4[pe] = rconn:4;
        sec_5[pe] = rconn:5;
		sec_6[pe] = rconn:6;
	;
;


typhoonHILlib/Transformer/Three-Phase Two Windings => core/Three Phase Two Winding Transformer:
    input = units;
    core_sat = on_off_to_bool(sat_toggle);
    Sn = Sn;
    f = fn;
    V1 = V1;
    V2 = V2;
    I1 = I1;
    I2 = I2;
    R1 = R1;
    R2 = R2;
    L1 = L1;
    L2 = L2;
    Rm = Rm;
    Lm = Lm;
    winding_1_connection = wye_delta_names(conn_1);
    winding_2_connection = wye_delta_names(conn_2);
    embedded_cp1 = on_off_to_bool(coup12);

	Terminals:
		PRM1[pe] = lconn:1;
		PRM2[pe] = lconn:2;
        PRM3[pe] = lconn:3;
        SEC1[pe] = rconn:1;
		SEC2[pe] = rconn:2;
        SEC3[pe] = rconn:3;
	;
;

typhoonHILlib/Transformer/Three-Phase Three Windings => core/Three Phase Three Winding Transformer:
    input = units;
    core_sat = on_off_to_bool(sat_toggle);
    Sn = Sn;
    f = fn;
    V1 = V1;
    V2 = V2;
    V3 = V3;
    I1 = I1;
    I2 = I2;
    I3 = I3;
    R1 = R1;
    R2 = R2;
    R3 = R3;
    L1 = L1;
    L2 = L2;
    L3 = L3;
    Rm = Rm;
    Lm = Lm;
    winding_1_connection = wye_delta_names(conn_1);
    winding_2_connection = wye_delta_names(conn_2);
    winding_3_connection = wye_delta_names(conn_3);
    embedded_cp1_12 = on_off_to_bool(coup12);
    embedded_cp1_13 = on_off_to_bool(coup13);

	Terminals:
		prm_1[pe] = lconn:1;
		prm_2[pe] = lconn:2;
        prm_3[pe] = lconn:3;
        sec_1[pe] = rconn:1;
		sec_2[pe] = rconn:2;
        sec_3[pe] = rconn:3;
		sec_4[pe] = rconn:4;
        sec_5[pe] = rconn:5;
		sec_6[pe] = rconn:6;
	;
;


typhoonHILlib/Rectifier/Single-Phase Diode => core/Single Phase Diode Rectifier:

	Terminals:
		a_in[pe] = lconn:1;
		b_in[pe] = lconn:2;
        pos_out[pe] = rconn:1;
        neg_out[pe] = rconn:2;
	;
;


typhoonHILlib/Rectifier/Three-Phase Diode => core/Three Phase Diode Rectifier:

	Terminals:
		a_in[pe] = lconn:1;
		b_in[pe] = lconn:2;
        c_in[pe] = lconn:3;
        pos_out[pe] = rconn:1;
        neg_out[pe] = rconn:2;
	;
;

typhoonHILlib/Rectifier/Single-Phase Thyristor => core/Single Phase Thyristor Rectifier:
    Sa_top = di_sa_top;
    Sa_bot = di_sa_bot;
    Sb_top = di_sb_top;
    Sb_bot = di_sb_bot;
    Sa_top_logic = sa_top_logic;
    Sa_bot_logic = sa_bot_logic;
    Sb_top_logic = sb_top_logic;
    Sb_bot_logic = sb_bot_logic;

	Terminals:
		a_in[pe] = lconn:1;
		b_in[pe] = lconn:2;
        pos_out[pe] = rconn:1;
        neg_out[pe] = rconn:2;
	;
;

typhoonHILlib/Rectifier/Three-Phase Thyristor => core/Three Phase Thyristor Rectifier:
    Sa_top = di_sa_top;
    Sa_bot = di_sa_bot;
    Sb_top = di_sb_top;
    Sb_bot = di_sb_bot;
    Sc_top = di_sc_top;
    Sc_bot = di_sc_bot;
    Sa_top_logic = sa_top_logic;
    Sa_bot_logic = sa_bot_logic;
    Sb_top_logic = sb_top_logic;
    Sb_bot_logic = sb_bot_logic;
    Sc_top_logic = sc_top_logic;
    Sc_bot_logic = sc_bot_logic;

	Terminals:
		a_in[pe] = lconn:1;
		b_in[pe] = lconn:2;
        c_in[pe] = lconn:3;
        pos_out[pe] = rconn:1;
        neg_out[pe] = rconn:2;
	;
;

typhoonHILlib/Rectifier/Vienna => core/Vienna Rectifier:
    Sa = di_sa_top;
    Sb = di_sa_bot;
    Sc = di_sb_top;
    Sa_logic = sa_top_logic;
    Sb_logic = sa_bot_logic;
    Sc_logic = sb_top_logic;

	Terminals:
		a_in[pe] = lconn:1;
		b_in[pe] = lconn:2;
        c_in[pe] = lconn:3;
        DC+[pe] = rconn:1;
        DCn[pe] = rconn:2;
        DC-[pe] = rconn:3;
	;
;


typhoonHILlib/DC-DC Converter/Buck => core/Buck:
    S1 = di_s1;
    S1_logic = s1_logic;

	Terminals:
		a_in[pe] = lconn:1;
		b_in[pe] = lconn:2;
        a_out[pe] = rconn:1;
        b_out[pe] = rconn:2;
	;
;

typhoonHILlib/DC-DC Converter/Boost => core/Boost:
    S1 = di_s1;
    S1_logic = s1_logic;

	Terminals:
		a_in[pe] = lconn:1;
		b_in[pe] = lconn:2;
        a_out[pe] = rconn:1;
        b_out[pe] = rconn:2;
	;
;

typhoonHILlib/DC-DC Converter/Boost => core/Symmetrical Boost:
    S1 = di_s1;
    S2 = di_s2;
    S1_logic = s1_logic;
    S2_logic = s2_logic;

	Terminals:
		a_in[pe] = lconn:1;
		b_in[pe] = lconn:2;
        a_out[pe] = rconn:1;
        #n_out[pe] = rconn:2;
        b_out[pe] = rconn:3;
	;
;

typhoonHILlib/Inverter/Single-Phase VSI => core/Single Phase Inverter:
    Sa_top = di_sa1;
    Sa_bot = di_sa2;
    Sb_top = di_sa3;
    Sb_bot = di_sa4;
    Sa_top_logic = sa1_logic;
    Sa_bot_logic = sa2_logic;
    Sb_top_logic = sa3_logic;
    Sb_bot_logic = sa4_logic;

	Terminals:
		neg_out[pe] = lconn:1;
        pos_out[pe] = lconn:2;
        a_in[pe] = rconn:1;
		b_in[pe] = rconn:2;
	;
;

typhoonHILlib/Inverter/Three-Phase VSI => core/Three Phase Inverter:
    Sa_top = di_sa1;
    Sa_bot = di_sa2;
    Sb_top = di_sa3;
    Sb_bot = di_sa4;
    Sc_top = di_sa5;
    Sc_bot = di_sa6;
    Sa_top_logic = sa1_logic;
    Sa_bot_logic = sa2_logic;
    Sb_top_logic = sa3_logic;
    Sb_bot_logic = sa4_logic;
    Sc_top_logic = sa5_logic;
    Sc_bot_logic = sa6_logic;
    Sa_top_I = i_sa1;
    Sa_bot_I = i_sa2;
    Sb_top_I = i_sa3;
    Sb_bot_I = i_sa4;
    Sc_top_I = i_sa5;
    Sc_bot_I = i_sa6;

	Terminals:
		neg_out[pe] = lconn:1;
        pos_out[pe] = lconn:2;
        a_in[pe] = rconn:1;
		b_in[pe] = rconn:2;
        c_in[pe] = rconn:3;
	;
;

typhoonHILlib/Inverter/NPC => core/Three Phase NPC Inverter:
    Sa_1 = di_sa1;
    Sa_2 = di_sa2;
    Sa_3 = di_sa3;
    Sa_4 = di_sa4;
    Sb_1 = di_sa5;
    Sb_2 = di_sa6;
    Sb_3 = di_sb1;
    Sb_4 = di_sb2;
    Sc_1 = di_sb3;
    Sc_2 = di_sb4;
    Sc_3 = di_sb5;
    Sc_4 = di_sb6;
    Sa_1_logic = sa1_logic;
    Sa_2_logic = sa2_logic;
    Sa_3_logic = sa3_logic;
    Sa_4_logic = sa4_logic;
    Sb_1_logic = sa5_logic;
    Sb_2_logic = sa6_logic;
    Sb_3_logic = sb1_logic;
    Sb_4_logic = sb2_logic;
    Sc_1_logic = sb3_logic;
    Sc_2_logic = sb4_logic;
    Sc_3_logic = sb5_logic;
    Sc_4_logic = sb6_logic;

	Terminals:
		DC+[pe] = lconn:1;
        DCn[pe] = lconn:2;
        DC-[pe] = lconn:3;
        A[pe] = rconn:1;
		B[pe] = rconn:2;
        C[pe] = rconn:3;
	;
;

typhoonHILlib/Inverter/T-Type => core/Three Phase T Type Inverter:
    Sa_1 = di_sa1;
    Sa_2 = di_sa2;
    Sa_3 = di_sa3;
    Sa_4 = di_sa4;
    Sb_1 = di_sa5;
    Sb_2 = di_sa6;
    Sb_3 = di_sb1;
    Sb_4 = di_sb2;
    Sc_1 = di_sb3;
    Sc_2 = di_sb4;
    Sc_3 = di_sb5;
    Sc_4 = di_sb6;
    Sa_1_logic = sa1_logic;
    Sa_2_logic = sa2_logic;
    Sa_3_logic = sa3_logic;
    Sa_4_logic = sa4_logic;
    Sb_1_logic = sa5_logic;
    Sb_2_logic = sa6_logic;
    Sb_3_logic = sb1_logic;
    Sb_4_logic = sb2_logic;
    Sc_1_logic = sb3_logic;
    Sc_2_logic = sb4_logic;
    Sc_3_logic = sb5_logic;
    Sc_4_logic = sb6_logic;

	Terminals:
		DC+[pe] = lconn:1;
        DCn[pe] = lconn:2;
        DC-[pe] = lconn:3;
        A[pe] = rconn:1;
		B[pe] = rconn:2;
        C[pe] = rconn:3;
	;
;

typhoonHILlib/Inverter/Flying-Capacitor (3L) => core/Three Phase Three Level Flying Capacitor Inverter:
    Sa_1 = di_sa1;
    Sa_2 = di_sa2;
    Sa_3 = di_sa3;
    Sa_4 = di_sa4;
    Sb_1 = di_sb1;
    Sb_2 = di_sb2;
    Sb_3 = di_sb3;
    Sb_4 = di_sb4;
    Sc_1 = di_sc1;
    Sc_2 = di_sc2;
    Sc_3 = di_sc3;
    Sc_4 = di_sc4;
    Sa_1_logic = sa1_logic;
    Sa_2_logic = sa2_logic;
    Sa_3_logic = sa3_logic;
    Sa_4_logic = sa4_logic;
    Sb_1_logic = sb1_logic;
    Sb_2_logic = sb2_logic;
    Sb_3_logic = sb3_logic;
    Sb_4_logic = sb4_logic;
    Sc_1_logic = sc1_logic;
    Sc_2_logic = sc2_logic;
    Sc_3_logic = sc3_logic;
    Sc_4_logic = sc4_logic;

	Terminals:
		DC+[pe] = lconn:1;
        DC-[pe] = lconn:2;
        A[pe] = rconn:1;
		B[pe] = rconn:2;
        C[pe] = rconn:3;
	;
;

typhoonHILlib/Inverter/CSI (2L) => core/Three Phase Two Level Current Source Inverter:
    Sa_top = di_sa1;
    Sa_bot = di_sa2;
    Sb_top = di_sa3;
    Sb_bot = di_sa4;
    Sc_top = di_sa5;
    Sc_bot = di_sa6;
    Sa_top_logic = sa1_logic;
    Sa_bot_logic = sa2_logic;
    Sb_top_logic = sa3_logic;
    Sb_bot_logic = sa4_logic;
    Sc_top_logic = sa5_logic;
    Sc_bot_logic = sa6_logic;

	Terminals:
		pos_out[pe] = lconn:1;
        neg_out[pe] = lconn:2;
        a_in[pe] = rconn:1;
		b_in[pe] = rconn:2;
        c_in[pe] = rconn:3;
	;
;

typhoonHILlib/Inverter/H5 (2L) => core/Single Phase Two Level H5 Inverter:
    Sa_top = di_sa1;
    Sa_bot = di_sa2;
    Sb_top = di_sa3;
    Sb_bot = di_sa4;
    S5 = di_sa5;
    Sa_top_logic = sa1_logic;
    Sa_bot_logic = sa2_logic;
    Sb_top_logic = sa3_logic;
    Sb_bot_logic = sa4_logic;
    S5_logic = sa5_logic;

	Terminals:
		pos_out[pe] = lconn:1;
        neg_out[pe] = lconn:2;
        a_in[pe] = rconn:1;
		b_in[pe] = rconn:2;
	;
;

typhoonHILlib/Inverter/H6 => core/H6 Single Phase Inverter:
    S_1 = di_sa1;
    S_2 = di_sa2;
    S_3 = di_sa3;
    S_4 = di_sa4;
    S_5 = di_sa5;
    S_6 = di_sa6;
    S_1_logic = sa1_logic;
    S_2_logic = sa2_logic;
    S_3_logic = sa3_logic;
    S_4_logic = sa4_logic;
    S_5_logic = sa5_logic;
    S_6_logic = sa6_logic;

	Terminals:
		pos_out[pe] = lconn:1;
        neg_out[pe] = lconn:2;
        a_in[pe] = rconn:1;
		b_in[pe] = rconn:2;
	;
;

typhoonHILlib/Inverter/H6_5 => core/H6_5 Single Phase Inverter:
    S_1 = di_sa1;
    S_2 = di_sa2;
    S_3 = di_sa3;
    S_4 = di_sa4;
    S_5 = di_sa5;
    S_6 = di_sa6;
    S_1_logic = sa1_logic;
    S_2_logic = sa2_logic;
    S_3_logic = sa3_logic;
    S_4_logic = sa4_logic;
    S_5_logic = sa5_logic;
    S_6_logic = sa6_logic;

	Terminals:
		pos_out[pe] = lconn:1;
        neg_out[pe] = lconn:2;
        a_in[pe] = rconn:1;
		b_in[pe] = rconn:2;
	;
;


typhoonHILlib/Permanent Magnet Synchronous Machine (PMSM)/Cylindrical => core/Permanent Magnet Synchronous Machine with Cylindrical Rotor:
    Rms = Rs;
    Lms = Lms;
    psi_pm = psi_pm;
    pms = pms;
    Jm = Jm;
    friction_coeff = fc;
    load_src = loadsource;
    ext_mdl_load_type = loadtype;
    load_ai_pin_addr = load_ai;
    load_ai_offset = load_offset;
    load_ai_gain = load_gain;
    enc_ppr = ppr;
    res_pole_pairs = resolver_pp;
    res_carr_source = resolver_source;
    res_int_carr_f = resolver_freq;
    Rsnb_stator = Rsnb;
    theta_ab = theta_ab;

	Terminals:
        a_in[pe] = lconn:1;
		b_in[pe] = lconn:2;
        c_in[pe] = lconn:3;
	;
;

typhoonHILlib/Permanent Magnet Synchronous Machine (PMSM)/Salient Pole => core/Permanent Magnet Synchronous Machine with Salient Rotor:
    Rs = Rs;
    Ld = Ld;
    Lq = Lq;
    Psi_pm = psi_pm;
    pms = pms;
    star_delta = stardelta;
    Jm = Jm;
    friction_coeff = fc;
    load_src = loadsource;
    ext_mdl_load_type = loadtype;
    load_ai_pin_addr = load_ai;
    load_ai_offset = load_offset;
    load_ai_gain = load_gain;
    enc_ppr = ppr;
    res_pole_pairs = resolver_pp;
    res_carr_source = resolver_source;
    res_int_carr_f = resolver_freq;
    theta_ab = theta_ab;

	Terminals:
        a_in[pe] = lconn:1;
		b_in[pe] = lconn:2;
        c_in[pe] = lconn:3;
	;
;
typhoonHILlib/Permanent Magnet Synchronous Machine (PMSM)/Salient Pole VBR => core/Permanent Magnet Synchronous Machine with Salient Rotor - Voltage Behind Reactance:
    Rs = Rs;
    Ld = Ld;
    Lq = Lq;
    Psi_pm = psi_pm;
    pms = pms;
    star_delta = stardelta;
    Jm = Jm;
    friction_coeff = fc;
    load_src = loadsource;
    ext_mdl_load_type = loadtype;
    load_ai_pin_addr = load_ai;
    load_ai_offset = load_offset;
    load_ai_gain = load_gain;
    enc_ppr = ppr;
    res_pole_pairs = resolver_pp;
    res_carr_source = resolver_source;
    res_int_carr_f = resolver_freq;
    theta_ab = theta_ab;

	Terminals:
        a_in[pe] = lconn:1;
		b_in[pe] = lconn:2;
        c_in[pe] = lconn:3;
	;
;

typhoonHILlib/Switching Leg/Diode => core/Diode Leg:

	Terminals:
        pos_out[pe] = lconn:1;
		abc_in[pe] = rconn:1;
        neg_out[pe] = lconn:2;
	;
;

typhoonHILlib/Switching Leg/IGBT => core/IGBT Leg:
    S_top = di_s1;
    S_bot = di_s2;
    S_top_logic = s1_logic;
    S_bot_logic = s2_logic;
    S_top_I = on_off_to_str(i_s1);
    S_bot_I = on_off_to_str(i_s2);


	Terminals:
        pos_out[pe] = lconn:1;
		a_in[pe] = rconn:1;
        neg_out[pe] = lconn:2;
	;
;

typhoonHILlib/Switching Leg/NPC => core/NPC Leg:
    S1 = di_s1;
    S2 = di_s2;
    S3 = di_s3;
    S4 = di_s4;
    S1_logic = s1_logic;
    S2_logic = s2_logic;
    S3_logic = s3_logic;
    S4_logic = s4_logic;

	Terminals:
        DC+[pe] = lconn:1;
		DCn[pe] = lconn:2;
        DC-[pe] = lconn:3;
        OUT[pe] = rconn:1;
	;
;

typhoonHILlib/Switching Leg/T-Type NPC => core/NPC T Type Leg:
    S1 = di_s1;
    S2 = di_s2;
    S3 = di_s3;
    S4 = di_s4;
    S1_logic = s1_logic;
    S2_logic = s2_logic;
    S3_logic = s3_logic;
    S4_logic = s4_logic;

	Terminals:
        DC+[pe] = lconn:1;
		DCn[pe] = lconn:2;
        DC-[pe] = lconn:3;
        A[pe] = rconn:1;
	;
;

typhoonHILlib/Switching Leg/Antiparallel Thyristor => core/Antiparallel Thryristor Leg:
    S1 = di_s1;
    S2 = di_s2;
    S1_logic = s1_logic;
    S2_logic = s2_logic;

	Terminals:
        a_in[pe] = lconn:1;
		a_out[pe] = rconn:1;
	;
;

# Depends on level number property
typhoonHILlib/Switching Leg/Flying Capacitor => core/X Level Flying Capacitor Inverter Leg:
    S_1 = di_s1;
    S_2 = di_s2;
    S_3 = di_s3;
    S_4 = di_s4;
    S_5 = di_s5;
    S_6 = di_s6;
    S_7 = di_s7;
    S_8 = di_s8;
    S_9 = di_s9;
    S_10 = di_s10;
    S_11 = di_s11;
    S_12 = di_s12;
    S_13 = di_s13;
    S_14 = di_s14;
    S_15 = di_s15;
    S_16 = di_s16;
    S_1_logic = s1_logic;
    S_2_logic = s2_logic;
    S_3_logic = s3_logic;
    S_4_logic = s4_logic;
    S_5_logic = s5_logic;
    S_6_logic = s6_logic;
    S_7_logic = s7_logic;
    S_8_logic = s8_logic;
    S_9_logic = s9_logic;
    S_10_logic = s10_logic;
    S_11_logic = s11_logic;
    S_12_logic = s12_logic;
    S_13_logic = s13_logic;
    S_14_logic = s14_logic;
    S_15_logic = s15_logic;
    S_16_logic = s16_logic;

	# Terminals:
	# 	p_node[pe] = 0;
	# 	n_node[pe] = 1;
	# ;
;
